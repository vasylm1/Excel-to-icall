import streamlit as st
import pandas as pd
from datetime import datetime
import base64

st.set_page_config(page_title="Class Schedule Converter", layout="centered")

# CSS styling (modern design)
st.markdown("""
<style>
body {
  background: linear-gradient(135deg, #f5f7fa 0%, #dfe7f5 100%);
  font-family: 'Segoe UI', sans-serif;
}
h1, h2 {
  background: linear-gradient(45deg, #4361ee, #3f37c9);
  color: white;
  padding: 1rem;
  border-radius: 12px;
  text-align: center;
  box-shadow: 0 4px 20px rgba(0,0,0,0.1);
}
.stButton button, .stDownloadButton button {
  background: linear-gradient(45deg, #4361ee, #3f37c9);
  color: white;
  font-weight: bold;
  border-radius: 8px;
  padding: 0.6rem 1.2rem;
  margin-top: 1rem;
  border: none;
}
.stDownloadButton button {
  background: linear-gradient(45deg, #2ecc71, #27ae60);
}
</style>
""", unsafe_allow_html=True)

# Language options and translations
lang = st.selectbox("üåç Language / Jƒôzyk / –ú–æ–≤–∞", ["English", "Polski", "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞"])

text = {
    "English": {
        "title": "üìÖ Class Schedule Converter",
        "upload": "Select your schedule file:",
        "download": "Download ICS File",
        "success": "ICS file generated!",
        "about_title": "About",
        "about_1": "I'm a marketing professional with a background in office administration, technical support, and product marketing.",
        "about_2": "My work centers around supporting product launches, creating and maintaining marketing assets, and improving content quality using tools like Power BI, Excel, SAP, and Power Platform.",
        "about_3": "I speak Ukrainian, Polish, English, and German, and I'm learning Spanish and Chinese. I enjoy working in international environments and collaborating across teams.",
        "about_4": "Outside of work, I'm passionate about travel, reading, exploring technology, staying active, and organizing events.",
        "linkedin": "LinkedIn Profile"
    },
    "Polski": {
        "title": "üìÖ Konwerter Planu Zajƒôƒá",
        "upload": "Wybierz plik z planem zajƒôƒá:",
        "download": "Pobierz plik ICS",
        "success": "Plik ICS zosta≈Ç wygenerowany!",
        "about_title": "O mnie",
        "about_1": "Jestem specjalistƒÖ ds. marketingu z do≈õwiadczeniem w administracji biurowej, wsparciu technicznym oraz marketingu produktowym.",
        "about_2": "Moja praca koncentruje siƒô na wsparciu wprowadzania produkt√≥w na rynek, tworzeniu i utrzymywaniu materia≈Ç√≥w marketingowych oraz poprawie jako≈õci tre≈õci przy u≈ºyciu narzƒôdzi takich jak Power BI, Excel, SAP i Power Platform.",
        "about_3": "Pos≈Çugujƒô siƒô jƒôzykiem ukrai≈Ñskim, polskim, angielskim i niemieckim, a obecnie uczƒô siƒô r√≥wnie≈º hiszpa≈Ñskiego i chi≈Ñskiego.",
        "about_4": "Poza pracƒÖ pasjonujƒô siƒô podr√≥≈ºami, czytaniem, nowymi technologiami, aktywnym stylem ≈ºycia oraz organizacjƒÖ wydarze≈Ñ.",
        "linkedin": "Profil LinkedIn"
    },
    "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞": {
        "title": "üìÖ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –†–æ–∑–∫–ª–∞–¥—É –ó–∞–Ω—è—Ç—å",
        "upload": "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –∑ —Ä–æ–∑–∫–ª–∞–¥–æ–º:",
        "download": "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª ICS",
        "success": "–§–∞–π–ª ICS —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!",
        "about_title": "–ü—Ä–æ –º–µ–Ω–µ",
        "about_1": "–Ø –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —ñ–∑ –¥–æ—Å–≤—ñ–¥–æ–º —É —Å—Ñ–µ—Ä—ñ –æ—Ñ—ñ—Å–Ω–æ–≥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è, —Ç–µ—Ö–Ω—ñ—á–Ω–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É.",
        "about_2": "–ú–æ—è —Ä–æ–±–æ—Ç–∞ –∑–æ—Å–µ—Ä–µ–¥–∂–µ–Ω–∞ –Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º—Ü—ñ –∑–∞–ø—É—Å–∫—ñ–≤ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–∞ —Å—É–ø—Ä–æ–≤–æ–¥—ñ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤, –∞ —Ç–∞–∫–æ–∂ –Ω–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —è–∫–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Power BI, Excel, SAP —Ç–∞ Power Platform.",
        "about_3": "–í–æ–ª–æ–¥—ñ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –ø–æ–ª—å—Å—å–∫–æ—é, –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é —Ç–∞ –Ω—ñ–º–µ—Ü—å–∫–æ—é –º–æ–≤–∞–º–∏, –∞ —Ç–∞–∫–æ–∂ –≤–∏–≤—á–∞—é —ñ—Å–ø–∞–Ω—Å—å–∫—É —Ç–∞ –∫–∏—Ç–∞–π—Å—å–∫—É. –ú–µ–Ω—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ–º—É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ —Ç–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.",
        "about_4": "–£ –≤—ñ–ª—å–Ω–∏–π —á–∞—Å –∑–∞—Ö–æ–ø–ª—é—é—Å—è –ø–æ–¥–æ—Ä–æ–∂–∞–º–∏, —á–∏—Ç–∞–Ω–Ω—è–º, –Ω–æ–≤–∏–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è–º–∏, —Å–ø–æ—Ä—Ç–æ–º —ñ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—î—é –∑–∞—Ö–æ–¥—ñ–≤.",
        "linkedin": "–ü—Ä–æ—Ñ—ñ–ª—å LinkedIn"
    }
}[lang]

tab1, tab2 = st.tabs(["üõ† " + text["title"], "üë§ " + text["about_title"]])

with tab1:
    st.header(text["title"])
    uploaded_file = st.file_uploader(text["upload"], type=["xls", "xlsx"])

    def format_datetime(value):
        if pd.isna(value): return ""
        if isinstance(value, str):
            try:
                return datetime.strptime(value, "%d.%m.%Y %H:%M").strftime("%Y%m%dT%H%M00")
            except:
                return ""
        if isinstance(value, (float, int)):
            try:
                return (pd.to_datetime("1899-12-30") + pd.to_timedelta(value, unit="D")).strftime("%Y%m%dT%H%M00")
            except:
                return ""
        if isinstance(value, datetime):
            return value.strftime("%Y%m%dT%H%M00")
        return ""

    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file, header=None)
            events = []

            for i, row in df.iterrows():
                if i == 0: continue
                start = format_datetime(row[0])
                end = format_datetime(row[1])
                summary = str(row[4]) if not pd.isna(row[4]) else ""
                description = "\\n".join(str(row[c]) for c in [6,7,8] if not pd.isna(row[c]))
                location = str(row[10]) if not pd.isna(row[10]) else ""

                if start and end and summary:
                    event = f"""BEGIN:VEVENT
DTSTART:{start}
DTEND:{end}
SUMMARY:{summary}"""
                    if description: event += f"\nDESCRIPTION:{description}"
                    if location: event += f"\nLOCATION:{location}"
                    event += "\nEND:VEVENT"
                    events.append(event)

            ics = "BEGIN:VCALENDAR\nVERSION:2.0\nCALSCALE:GREGORIAN\n" + "\n".join(events) + "\nEND:VCALENDAR"

            st.success(text["success"])

            b64 = base64.b64encode(ics.encode()).decode()
            href = f'<a href="data:text/calendar;charset=utf-8;base64,{b64}" download="class_schedule.ics"><button class="stDownloadButton">{text["download"]}</button></a>'
            st.markdown(href, unsafe_allow_html=True)

            with st.expander("Preview .ics"):
                st.code(ics)

        except Exception as e:
            st.error(f"Error: {e}")

with tab2:
    st.header(text["about_title"])
    st.write(text["about_1"])
    st.write(text["about_2"])
    st.write(text["about_3"])
    st.write(text["about_4"])
    st.markdown(f'<a href="https://www.linkedin.com/in/vasyl-madei-399488247/" target="_blank"><button class="stButton">{text["linkedin"]}</button></a>', unsafe_allow_html=True)
